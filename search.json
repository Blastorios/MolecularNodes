[
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Molecular Nodes is an add-on for the 3D animation program Blender. It runs inside of Blender, so the first step for installation is to download and install the latest version of blender.\n\n\n\nThe download page of Blender.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#downloading-blender",
    "href": "installation.html#downloading-blender",
    "title": "Installation",
    "section": "",
    "text": "Molecular Nodes is an add-on for the 3D animation program Blender. It runs inside of Blender, so the first step for installation is to download and install the latest version of blender.\n\n\n\nThe download page of Blender.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#downloading-molecular-nodes",
    "href": "installation.html#downloading-molecular-nodes",
    "title": "Installation",
    "section": "Downloading Molecular Nodes",
    "text": "Downloading Molecular Nodes\nDownload the latest bundled release from the releases page. Don’t download the GitHub repo itself, as this won’t install inside of Blender.\n\n\n\n\n\n\nSafari\n\n\n\nWhen downloading on MacOS with Safari, it automatically unzips the file into a MolecularNodes folder. This is extremely unhelpful as Blender requires the .zip file to install the addon. Either download with a different browser, or compress the folder again to MolecularNodes.zip.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#installing-the-addon",
    "href": "installation.html#installing-the-addon",
    "title": "Installation",
    "section": "Installing the Addon",
    "text": "Installing the Addon\n\n\n\n\n\n\nWindows Administrator\n\n\n\nIf you are on Windows, you may need to run Blender as Administrator to successfully complete the following installation.\n\n\n\nOpen Preferences Panel\n\nClick `Edit’ -&gt; ‘Preferences’ or press Cmd +  , on Mac.\n\n\n\n\nClick ‘Install’ while in ‘Add-ons’\n\n\n\nSelect MolecularNodes_X.zip\n\nThe X’s will be the current version number of the add-on.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#installing-biotite-mdanalysis",
    "href": "installation.html#installing-biotite-mdanalysis",
    "title": "Installation",
    "section": "Installing Biotite & MDAnalysis",
    "text": "Installing Biotite & MDAnalysis\nTo import different data formats, different python packages are required to be installed. Each python package is responsible for importing a different data format.\n\nBiotite: handles the majority of .pdb / .cif file parsing and downloading from the wwPDB.\nMDAnalysis: enables import of molecular dynamics trajectories from programs such as GROMACS / LAMMPS.\nmrcfile: enables import of electron microscopy densities and EM tomography .map files.\n\nEach of these packages should be fine to be installed by a single click. Blender will freeze for potentially a minute or so during installation. Currently M1 / M2 macs require more complex installation to install MDAnalysis, please see the instructions below. Downloading from the wwPDB and opening local .pdb files with Biotite should work fine without MDAnalysis installed.\n\n\n\n\n\n\nMacOS M1 & M2\n\n\n\n\n\nBlender’s bundled python is unable to install python packages that require compilation on the user’s machine. Currently, MDAnalysis is missing a pre-compiled .whl to install, and thus installation will fail on M1 & M2 machines. You can download and pre-compile these packages on your machine yourself, following the below instructions.\nThis is the current fix for M1 / M2 machines, but will be fixed in future releases.\nIn short:\n\nInstall miniconda\nDownload and build the required packages for your system\n\nmkdir ~/MDAnalysis-wheel\ncd MDAnalysis-wheel\nconda create -n wheel-builder python=3.10 cython\nconda activate wheel-builder\npython -m pip wheel MDAnalysis==2.6.1 --cache-dir .\nconda deactivate\n\nInstall the built .whl packages, into Blender’s bundled python. The path to your\n\nNavigate to your Blender’s python folder (this is the default path for Blender 3.5)\ncd /Applications/Blender.app/Contents/Resources/3.6/python/bin/\nInstall the cached .whl into the bundled python that came with Blender.\n./python3.10 -m pip install MDAnalysis==2.6.1 --cache-dir ~/MDAnalysis-wheel\nThe Install MDAnalysis button should have updated to detect the MDAnalysis installation.\n\n\n\n\nA message should report the successful installation of each package, with the button changing to Reinstall biotite once Molecular Nodes detects the successful installation of the package.\nYou may need to restart Blender after package installation for them to work properly.\nIf you have troubled with installation, search through the issues page for a potential solution. If you can’t find the solution there, please open a new issue on the GitHub page. Please don’t just DM or email me directly. It’s better to do problem solving out in the open, as others might have the same issue or someone other than me may already have a solution!",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html",
    "href": "tutorials/00_interface.html",
    "title": "Blender’s Interface",
    "section": "",
    "text": "Blender has a very overwhelming interface. There is no getting around this. Blender can do practically anything, and it is sometimes hard to do simple things.",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#transforming-objects",
    "href": "tutorials/00_interface.html#transforming-objects",
    "title": "Blender’s Interface",
    "section": "Transforming Objects",
    "text": "Transforming Objects\nThe main difference is that you can also manipulate the 3D scene in front of you. You can select objects with a left click of the mouse LMB, and move them around by Grabbing them with the G key.\nThe main actions that you use the 3D Viewport for are:\n\n\nG - Grabbing: Moving an object around in 3D space.\nS - Scaling: Changing the relative size of an object.\nR - Rotating: Rotating the object in 3D space.\n\nVideo\n\nLocking to an Axis\nWhen transforming by grabbing, rotating or scaling, you can lock the transformation to a particular axis. Click X / Y / Z after starting the transformation to lock it to those axes, or Shift + X / Y / Z to lock the transformation to be perpendicular to that axis.\nVideo",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#rendered-view",
    "href": "tutorials/00_interface.html#rendered-view",
    "title": "Blender’s Interface",
    "section": "Rendered View",
    "text": "Rendered View\nBy default you start in 3D View, which is characterised by everything being gray and not rendered properly.\nYou can change to the different views via the render view buttons, or by holding Z and selecting one of the options.\nEach of the views are useful in their own way. If you have a powerful enough computer, you can spend the majority of your time in either Rendered or Material Preview view which will ensure everything is shaded and lighting is calculated. If a scene is becoming complex and your computer is slow, you can switch back to 3D View which should improve performance.\nVideo",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#rendering-engines",
    "href": "tutorials/00_interface.html#rendering-engines",
    "title": "Blender’s Interface",
    "section": "Rendering Engines",
    "text": "Rendering Engines\nAlready there are different ways to view the scene, through the ‘rendered view’ and the other methods. Even with the option of rendered view, there are multiple different rendering engines. Two rendering engines come pre-installed with Blender, with the possibility to use more. The two rendering engines that come pre-installed are Eevee and Cycles. By default Eevee is enabled, but you can change to Cycles in the Render Properties tab.\nEevee is much faster and more responsive than Cycles, but a lot of the time doesn’t ‘look as nice’. Eevee is a real-time rendering engine built for performance and interactivity, while Cycles is a path-traced rendering engine built for physically accurate light calculations. This is much slower to calculate but often results in ‘nicer’ lighting. Both rendering engines are excellent and are helpful in different scenarios depending on the desired outcomes.\nThe default style Atoms Cycles inside of Molecular Nodes is only visible inside of Cycles for performance reasons. All other styles are visible inside of both rendering engines. If your atoms seem to be invisible, check the rendering engine and style that you are using.\n\nIf you have the option available, ensure to switch to GPU Compute instead of CPU when using the Cycles render engine. This will usually always be the better option, and the perforamnce will be much better.\n\nVideo",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#adding-objects",
    "href": "tutorials/00_interface.html#adding-objects",
    "title": "Blender’s Interface",
    "section": "Adding Objects",
    "text": "Adding Objects\nYou can add new objects by Shift + A or by using the Add menu in the top left.\nThere are a number of different object types that can be added. The most common that you will use will be Mesh and Light. Try adding some new objects, Grabbing them to move them around, Rotating them and Scaling them to different sizes. If you have just added a new object and it isn’t immediately visible, it might be inside another object, or it could be too big or too small to be immediately visible. Try moving the camera or the object around to get a better view.\n\n\n\nThe add menu. Also accesible through Shift + A\n\n\nVideo",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#rendering-an-image",
    "href": "tutorials/00_interface.html#rendering-an-image",
    "title": "Blender’s Interface",
    "section": "Rendering an Image",
    "text": "Rendering an Image\nTo render an image, you can click F12 or use the Render -&gt; Render Image menu. Blender will not render what you are immediately seeing. Instead, it will render whatever the Camera** is seeing. This can be frustrating at first, but it makes sense when you can have multiple cameras in a single scene.\nTo see what the camera sees, you can click the Camera widget in the top right, or click backtick (`) + 1.\n\nThe backtick is directly under the Esc key on most American / Enlgish keyboards. It can vary in other language layouts.\n\nVideo\nOnce you are happy with the camera framing, click render.\n\n\n\nThe render menu.\n\n\nA window should appear, showing the rendered image. Isn’t it magnificent?\nThe rendered image is not saved. You have to manually save the image by clicking Image -&gt; Save As and choose where to save the image.\n\n\n\nThe rendered image window.",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#add-more-lights",
    "href": "tutorials/00_interface.html#add-more-lights",
    "title": "Blender’s Interface",
    "section": "Add More Lights",
    "text": "Add More Lights\nWe can make our 3D scene more interesting by adding more lights. When the light object is selected, the green Light Settings tab becomes available, appearing as a small green lightbulb. Under these settings, we can change the colour of our light, along with the Power. Try tweaking these settings to your liking. You can duplicate an object without adding a new one by clicking Shift + D.\n\n\nVideo\nAdding more lights to the scene.",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#materials",
    "href": "tutorials/00_interface.html#materials",
    "title": "Blender’s Interface",
    "section": "Materials",
    "text": "Materials\nOne of the hardest things to get used to while working in 3D is the idea of materials. What if we want to make the monkey head Red? In 3D we can’t just make things red. Instead we have to assign it a material. This material can have the property that it is primarily red, but it is also metallic, has a sheen, reflects light, can be partially transparent as well as a whole range of other properties.\nComplex shading is an entire career itself, so we won’t get too much in to it. In this example we will just add a material to the monkey to make it red, and a different material to the cube to make it blue.\n\nIf you can’t see the colors changing, ensure you are in Rendered view.\n\nIn the example below, we create a new material called Material.001 for the monkey which we change to red. The cube already has a material called Material. We change the material being used to the monkey’s material, before changing it back and editing the starting material so that it is blue.\nTry playing around with some of the other material settings, to see what effects you can create.\n\n\nVideo\nAssigning materials to objects.",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/00_interface.html#edit-mode",
    "href": "tutorials/00_interface.html#edit-mode",
    "title": "Blender’s Interface",
    "section": "Edit Mode",
    "text": "Edit Mode\nThe last thing to be aware of when working inside of a 3D program like Blender, is that you can manually edit the 3D objects that are inside of the scene. In the top left hand corner of the 3D viewport. With an object selected, you can change between the different modes. You can edit the physical shape of a mesh, by moving individual or groups of vertices, by going into Edit Mode. You can also use the keyboard shortcut Tab\n\n\n\nThe different modes are available when an object is selected.\n\n\nWith a mesh object selected, you can change in to edit mode. While in edit mode, different options are available to you, and you can phsyically edit the mesh. Try selecting some vertices of the mesh and moving them around individually.\n\n\nVideo\nExample of entering edit mode.\n\n\nYou now know the very basics of adding new objects, changing the materials, adding some lights and rendering an image. The same principles apply to everything that you you do in Blender, and often all of the different workspaces will contain similar keyboard shortcuts and ways of working. Try playing around some more inside of the 3D scene, rendering some different 3D images, before moving on to the section which includes actual proteins.\nMost things are best learnt by doing, so load some proteins in and try to follow along with the other tutorials.",
    "crumbs": [
      "Tutorials",
      "Blender's Interface"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html",
    "href": "tutorials/01_importing.html",
    "title": "Fetch from the PDB",
    "section": "",
    "text": "Molecules, simulations and other file formats can all be imported via the Molecular Nodes subpanel. This panel can be found under the Scene Properties panel. This is the small cone and spheres icon on the right. This contains all of the different options for importing molecular data currently available inside of Molecular Nodes.\nYou can download a structure directly from the PDB, just from the accession code. Molecular Nodes will download the file as a .mmtf file and cache it locally on your computer, then open the file in to Blender. This is the quickest way to import structures that are already available via the wwPDB. Currently this downloads via the RCSB.\nTo download directly from the PDB, you can use the PDB tab.",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#pdb-tab",
    "href": "tutorials/01_importing.html#pdb-tab",
    "title": "Fetch from the PDB",
    "section": "PDB Tab",
    "text": "PDB Tab\nIn this tab you can input the PDB ID to be used for downloading the structure. You can also change where Molecular Nodes caches the downloaded structures. By default it will be in a hidden .MolecularNodes folder in your home directory.\n\n\n\nThe PDB import tab.\n\n\nType in the code, choose your import options such as starting style, and click download. The new object will appear in the outliner. It will appear inside of the MolecularNodes collection and should have the name of the PDB ID used to fetch the structure. If an object already exists with that name, it will be appended with a .001 or similar suffix.\nThe molecule may appear inside of the default cube, so you may have to delete it before the protein becomes visible.\n\n\nVideo\nDownloading 4OZS from the PDB",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#edit-mode",
    "href": "tutorials/01_importing.html#edit-mode",
    "title": "Fetch from the PDB",
    "section": "Edit Mode",
    "text": "Edit Mode\nThe protein is imported as a 3D mesh, with a vertex for each atom and an edge for each bond. What you are seeing is the result of passing that data through a geometry-processing pipeline. The underlying data is still available, and you can even look at it (and edit it if you wish) by going using edit mode with Tab\nYou are editing the underlying atomic data, not the cartoon itself. The cartoon is rebuilt on top of the edited atomic data, which is why part of it also moves with the atoms when they are moved.\nIt is probably ill-advised to manually edit the atomic data by hand, but it is important to understand the structure of the data inside of Blender & Molecular Nodes.\nVideo",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#rendered-views",
    "href": "tutorials/01_importing.html#rendered-views",
    "title": "Fetch from the PDB",
    "section": "Rendered Views",
    "text": "Rendered Views\nWhile the molecule is imported, we are in 3D view by default. We can change to a rendered view to view the molecule with more accurately calculated lighting effects.\n\n\nVideo\nChanging to rendered views in different rendering engines.",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#changing-styles",
    "href": "tutorials/01_importing.html#changing-styles",
    "title": "Fetch from the PDB",
    "section": "Changing Styles",
    "text": "Changing Styles\nThe protein is now imported in the scene. To change the way the protein is displayed, we have to use the Geometry Nodes editor. This is where we change the nodes that are use to process the underlying atomic data, resulting in the final 3D object we can see in front of us.\nTo access Geometry Nodes panel, we can either select the Geoemtry Nodes workspace, or split the current viewport and change one of the workspaces into the node editor.\n\n\nVideo\nArranging workspaces.\n\n\nYou can change the workspace through the tabs in the top of Blender. You can split workspaces by hovering over the corner of a workspace, and then clicking and dragging. You can merge to workspaces by clicking and dragging from one into another, while dragging into the same workspace will split it and create two workspaces.\n\n\nVideo\nOpening the Geometry Nodes workspaces.\n\n\nGeometry node trees are explained more in the next section.\nIn short, the atomic data comes through the Group Input on the left, and the final 3D model goes out the Group Output to the right. Each node in between performs some actions on the data. The first node changes the colours of the atoms. The last node applies the given style. When importing we chose the Cartoon style default, so we have a cartoon node.\nWe can add a new node through the Add menu, or we can use Shift + A to add new nodes. We can click and drag on the noodle outputs and inputs to remove and create new connections. Notice how when the complete ‘circuit’ or ‘flow diagram’ goes through the ball and stick node, the style changes to ball and stick. When it flows through the cartoon node, the style changes to cartoon.\n\n\nVideo\nAdding a new node to change the output style.",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#geometry-nodes-editor",
    "href": "tutorials/01_importing.html#geometry-nodes-editor",
    "title": "Fetch from the PDB",
    "section": "Geometry Nodes Editor",
    "text": "Geometry Nodes Editor\nThis is where we edit the node graph for Molecular Nodes. The node graph is a geometry processing program you create, that is read and executed by Blender from left to right. Each node performs an action on the geometry that is passed into it, and the result of that action is passed out to the right. Think of it as creating a set of rules for the computer to follow. You define the rules, and the computer can follow those same rules, even if you start with a different data set.\nThe data flows like a river, along the green noodles of the node graph. There must be only 1 final output. If you are using the molecular data, then there must also be a single input.\n\n\n\nExample node tree, demonstrating the flow of information through the nodes.\n\n\nThe data flows from left to right, like water through a river.\n\n\n\n\nflowchart LR\n  A{Atomic\\nData} --&gt; B[Manipulation]\n  B --&gt; D(Style)\n  D --&gt; G{Geometry\\nOutput}\n\n\n\n\n\n\n\n\nScreenshot of the Geometry Nodes workspace.\n\n\nThe starting style MOL_style_atoms_cycles is only visible via inside of the Cycles render engine. You can add other styles manipulate the data through other nodes, by adding them with Shift + A and navigating to the MolecularNodes panel at the bottom. There are several categories of nodes for different animations and styles. You can add the Ribbon Protein node, which will create a ribbon representation based on the alpha carbons in the structure. If there is not colour in the structure, ensure that the node has a material MOL_atomic_material at the bottom of the node.\n\nThe data flows through the node graph from left to right. There should always be one input, which is the atomic data that is stored in the 3D mesh of the atoms and bonds. There should also be only one output, which is the final geometry that has been created throughout the node graph.\n\n\n\n\nflowchart LR\n  A{Atomic\\nData} --&gt; B[Manipulation]\n\n  B --&gt; D(Style 1)\n  B --&gt; E(Style 2)\n  B --&gt; S(Style 3)\n\n  sS[Selection] --&gt; S\n\n  E --&gt; F[Join\\nGeometry]\n  D --&gt; F\n  S --&gt; F\n\n  F --&gt; G{Geometry\\nOutput}\n\n\n\n\n\nAs demonstrated in the diagram, the flow of the data can split across multiple different branches of the tree, with the result of each parallel computation being combined before being exported.\nEach of these different branches can be a different style, in this example shown two different styles are applied, and the third style has a custom selection. All of the styles are the result of the same data manipulation.\nThe node graph in between can be as complex as you want to make it, as long as there is a continuous connection to the output of the geometry, it should produce a result.\n\n\n\nAn example of a more complex node graph, with multiple branches that diverge and come back together.\n\n\nCombining multiple different nodes you can create protein models and complex 3D scenes. In the example below, there is a node tree which should be present on every new structure imported via MolecularNodes. The atoms and bonds are passed in from the left, the atoms are given a colour based on their element and their chain_id, and then the atoms are styled as atoms, scaling the atom radii to 1.00.\nThe data flows through the node tree from left to right, along the bright green lines. The atomic data comes in, goes through layers of manipulation, a style is applied, and the created geometry is then outputted from the node tree.\n\nEditing the Styles\nTo change how each style looks, you can edit the default values of the nodes. By changing the values, you change the numbers that are used in the creation of the 3D models. The style will only change if it is being output through the node tree. You can click and drag to change the values smoothly. You can hold Shift while dragging the values to change them more accurately.\n\n\nVideo\nTweaking the default values of the styles.",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#combining-styles",
    "href": "tutorials/01_importing.html#combining-styles",
    "title": "Fetch from the PDB",
    "section": "Combining Styles",
    "text": "Combining Styles\nTo complete this tutorial, we will combine the use of Selection and Join Geometry to create a style which shows the side chains as ball and stick while also showing the cartoon style.\nThe style should usually be the last node that you apply to a model. You can’t apply a style after another style, as the output of a style is 3D geometry and not ‘atom-like’ geometry. Instead, we can combine two styles with a Join Geometry node. That way, we create both styles in parallel and then join them together before outputting them all through the Group Output node.\nThe node can be found under Geometry or by going through the search for Join Geometry\n\n\nVideo\nAdding a Join Geometry node.",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "tutorials/01_importing.html#selections",
    "href": "tutorials/01_importing.html#selections",
    "title": "Fetch from the PDB",
    "section": "Selections",
    "text": "Selections\nMany nodes will have a Selection input, which you can’t manually edit. This input is a Boolean attribute and says whether or not to apply an operation to atoms based on if the value is True or False.\nYou can use selections via the Molecular Nodes -&gt; Selection menu. In this example we use the Backbone node to select atoms based on if they are part of the backbone, the side chain, or just alpha carbons.\nYou can see as we connect different outputs from the Backbone node, we get different results in the final style.\n\n\nVideo\nChanging selections for the Ball and Stick style.",
    "crumbs": [
      "Tutorials",
      "Fetch from the PDB"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "Molecular Nodes (MN) is an addon for the 3D modelling & animation program Blender. MN enables easy import of molecular data such as .pdb & .mmCIF, along with a variety of molecular dynamics trajectories and topologies from a variety of simulation sources. Other data formats including electron microscopy (EM) .map, EM tomography files such as .map and .star, with the potential to support more data formats as well.\nMolecular Nodes provides the translation layer that allows importing of molecular data formats, while Blender provides the industry-leading animation and rendering tools to create visually stunning molecular graphics with ease.\nThe add-on runs on the Geometry Nodes procedural modelling and animation system inside of Blender, which gives the add-on speed and robustness with minimal user input required.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#molecular-nodes-in-the-wild",
    "href": "index.html#molecular-nodes-in-the-wild",
    "title": "About",
    "section": "Molecular Nodes in the Wild",
    "text": "Molecular Nodes in the Wild\nBelow will feature some examples of Molecular Nodes being used in videos, from around the internet.\n\nVeritasium\n\n\n\n\nNano Rooms\n\n\n\n\n\nSt. Jude Children’s Research Hospital",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "About",
    "section": "Getting Started",
    "text": "Getting Started\nTo get started, checkout the installation page for detailed instructions on how to install the add-on. Next check out some of the tutorials, such as intro to blender, basics of downloading from the PDB or how to customise selections.\nThere are some slightly outdate tutorials on YouTube about how to use the add-on also. MN has been developed further and improved since these videos, but the general workflow remains the same.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "To create the animation of ATP synthase you can morph between separate states of ATP synthase and export them from your favourite molecular graphics program. In this example, we will use ChimeraX.\nUse the following code in ChimeraX’s console to import and create a morph between the 3 different protein conformations that will create the animation:\nopen 6n2y 6n2z 6n30\nmorph #1,2,3 wrap true\nYou can now play back the animation inside of ChimeraX.\nTo save the animation as a multi-pdb file, use the following code to save the .pdb file:\nsave atp-frames.pdb #4 allCoordsets true\nYou can now open the multi-frame pdb file inside of Molecular Nodes using the ‘Open Local File’ tab.\n\nThis example is taken directly from the ChimeraX twitter account:\n\n\nTo morph between 3 conformations of ATP synthase use ChimeraX commands “open 6n2y 6n2z 6n30” and “morph #1,2,3 wrap true”. #ChimeraXHowTo pic.twitter.com/2u4Au6Tvpf\n\n— ChimeraX (@UCSFChimeraX) May 8, 2020",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#animating-atp-synthase",
    "href": "examples.html#animating-atp-synthase",
    "title": "Examples",
    "section": "",
    "text": "To create the animation of ATP synthase you can morph between separate states of ATP synthase and export them from your favourite molecular graphics program. In this example, we will use ChimeraX.\nUse the following code in ChimeraX’s console to import and create a morph between the 3 different protein conformations that will create the animation:\nopen 6n2y 6n2z 6n30\nmorph #1,2,3 wrap true\nYou can now play back the animation inside of ChimeraX.\nTo save the animation as a multi-pdb file, use the following code to save the .pdb file:\nsave atp-frames.pdb #4 allCoordsets true\nYou can now open the multi-frame pdb file inside of Molecular Nodes using the ‘Open Local File’ tab.\n\nThis example is taken directly from the ChimeraX twitter account:\n\n\nTo morph between 3 conformations of ATP synthase use ChimeraX commands “open 6n2y 6n2z 6n30” and “morph #1,2,3 wrap true”. #ChimeraXHowTo pic.twitter.com/2u4Au6Tvpf\n\n— ChimeraX (@UCSFChimeraX) May 8, 2020",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#animating-covid-spike-protein",
    "href": "examples.html#animating-covid-spike-protein",
    "title": "Examples",
    "section": "2 Animating COVID Spike Protein",
    "text": "2 Animating COVID Spike Protein\n\n\n\n\n\n\nRequires MDAnalysis Installed\n\n\n\nTo follow this particular tutorial, ensure you have first installed Molecular Nodes properly, including the optional MDAnalysis python package.\n\n\nDownload the trajectory files from the the CHARMM-GUI website:\nYou will want to download the .xtc files for the spike protein in membrane.\n\n\n\n\n\n\nCaution\n\n\n\nThe .xtc file will be large, ~2GB so the download may take a while.\n\n\n\nUnzip the files (you may need to unzip the unzipped file) and then inside of Molecular Nodes, in the MD Trajectory tab, select the tpology file (last_frame_nos.pdb) and the trajectory file (trj_nos.xtc).\n\nGive the molecule a name, and your panel should look like this:\n\n\n2.1 Frames to Import\nIn the frame import options, we can choose which frames from the trajectory to import. Importing every frame (interval = 1 ) will take long time to load, and balloon-out the save-file size of the .blend file. It’s best to work with some subset of the trajectory frames, and interpolate between them with Molecular Nodes.\n\n\n\n\n\n\n\nNote\n\n\n\nMolecular nodes is still surprisingly performant with thousands of frames loaded, but the .blend file takes a long time to save and load due to several GBs worth of data being save and loaded each time.\n\n\nFor this example we are going to import every 10th frame.\n\n\n2.2 Click ‘Import Frames’ and Wait\nMolecular Nodes is working through a lot of data, so this load step can take a few minutes - be patient. Once it’s all loaded, the structure along with the atomic properties are available for use inside of Geometry Nodes!\n\n\n2.3 Click space to play the animation.\nEnsure to change over to Cycles & rendered view to view the coloured atoms, but otherwise the animation should be playing if press space!\nJust Points\nVideo\nRendered View In this scene I additionally added a Sun light.\nVideo\n\n\n2.4 Geometry Nodes\nNow that the animation is imported into geometry nodes, you can work with the points as you would otherwise.\nTry applying some noise, or in this example, scaling the points to 0 based on the proximity to an empty.\nVideo",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "tutorials/02_selections.html",
    "href": "tutorials/02_selections.html",
    "title": "Selections",
    "section": "",
    "text": "Selections power every part of Molecular Visualisation. You are probably used to using selections via manually pointing and clicking with your mouse, or typing long strings of complex selection algebra.",
    "crumbs": [
      "Tutorials",
      "Selections"
    ]
  },
  {
    "objectID": "tutorials/02_selections.html#a-simple-example",
    "href": "tutorials/02_selections.html#a-simple-example",
    "title": "Selections",
    "section": "A Simple Example",
    "text": "A Simple Example\nTo create a selection of residues ALA, CYS and TRP, only inside of chain A, you would use the following code inside of PyMol:\nselect my_selection, chain A and (resn ALA+CYS+TRP)\nInside of Molecular Nodes, you combine different selection nodes using Boolean Math nodes to create increasingly complex selections.\n\n\n\nReplicating the same selection in Molecular Nodes\n\n\nThis might initially seem quite verbose. The good thing however is that these selections can always be updated and tweaked. They can even be created procedurally based on the values of other selections or animations.\nIn the example video below we are using the selection to apply the Atoms style. We can change the residues and chains that are selected by ticking and unticking the boxes. Each of these selections also take a field input, so they can use the output of other selection nodes. The selections from the two nodes are being combined with the Boolean Math node set to And. Other boolean math operations are also available.\nVideo",
    "crumbs": [
      "Tutorials",
      "Selections"
    ]
  },
  {
    "objectID": "tutorials/02_selections.html#different-styles-combined",
    "href": "tutorials/02_selections.html#different-styles-combined",
    "title": "Selections",
    "section": "Different Styles Combined",
    "text": "Different Styles Combined\nIn this example, we apply the Surface style to one chain, and the Atoms style to another chain. We can join the two styles together with the Join Geometry node.\nVideo",
    "crumbs": [
      "Tutorials",
      "Selections"
    ]
  },
  {
    "objectID": "tutorials/02_selections.html#combining-selections",
    "href": "tutorials/02_selections.html#combining-selections",
    "title": "Selections",
    "section": "Combining Selections",
    "text": "Combining Selections\nSelections can be combined not just through Boolean Math nodes, but also by connecting the output from one node to the input of another selection. In this example we are selecting two chains for applying the Atoms style to.\nThe selection of Chain A we then control though the Cube selection node. The addition of this node creates a new object called Empty_Cube which we can transform by Grabbing, Rotating and Scaling to change what is inside of the cube. The style is then applied to the updated selection, which varies for Cahin A but not for Chain F.\nVideo",
    "crumbs": [
      "Tutorials",
      "Selections"
    ]
  },
  {
    "objectID": "tutorials/02_selections.html#more-examples",
    "href": "tutorials/02_selections.html#more-examples",
    "title": "Selections",
    "section": "More Examples",
    "text": "More Examples\nYou can use these dynamic selections for any kind of boolean input. It can be used to select the atoms to apply a style to or even to change different aspects of that style itself. In this example, we first choose the atoms to apply the style to; then instead, we change whether or not we use cylinders for the cartoon style.\nVideo\nSelecting based on the entity_id, to reveal the rotary axel of the protein complex underneath.\nVideo",
    "crumbs": [
      "Tutorials",
      "Selections"
    ]
  },
  {
    "objectID": "tutorials/02_selections.html#open-a-local-file",
    "href": "tutorials/02_selections.html#open-a-local-file",
    "title": "Selections",
    "section": "Open a Local File",
    "text": "Open a Local File\nTo open a .pdb, .mmCIF, .pdbx or other similar files, use the Local File tab.\nYou can set the name for the molecule, which will become the object’s name once imported. Use the folder icon to select the file you would like to import.\n\n\n\nThe ‘Local File’ tab.\n\n\nThe ‘Default Style’ was changed to ‘Cartoon’, but no other default import options were changed. The Default Cube was deleted with X as the protein was imported inside of the cube.",
    "crumbs": [
      "Tutorials",
      "Selections"
    ]
  },
  {
    "objectID": "tutorials/03_molecular_dynamics.html",
    "href": "tutorials/03_molecular_dynamics.html",
    "title": "Molecular Dynamics",
    "section": "",
    "text": "Video\nFigure 1: The protein adenylate kinase (AdK) undergoes a structural change during its catalytic cycle between a closed and an open state that is captured in enhanced sampling simulations (Seyler et al. 2015). The protein secondary structure is shown as a round ribbon with individual amino acid sidechains as ball-and-sticks. The trajectory was rendered with Blender and the MolecularNodes plugin (Brady Johnston). Trajectory files are available via MDAnalysisData Copyright CC-BY 2023 Brady Johnston.\nAs well as importing static structures, the results from molecular dynamics simulations can be imported as models in to Blender. This is enabled through the excellent package MDAnalysis. The imported structure will have an object created that will act as the topology file. Depending on the import method, the frames of the trajectory will either be streamed from the disk, or loaded in to memory inside of the .blend file as their own separate objects.",
    "crumbs": [
      "Tutorials",
      "Molecular Dynamics"
    ]
  },
  {
    "objectID": "tutorials/03_molecular_dynamics.html#md-trajectory-panel",
    "href": "tutorials/03_molecular_dynamics.html#md-trajectory-panel",
    "title": "Molecular Dynamics",
    "section": "MD Trajectory Panel",
    "text": "MD Trajectory Panel\nUse the MD Trajectory panel to import trajectories.\n\nThe minimum requirements are a valid topology file, that can be read by MDAnalysis.\nIf just a toplogy file is selected, then the model will be imported without any trajectory associated with it. If a trajectory file is additionally chosen, then a trajectory will be associated with the toplogy file.\n\nImport Methods\nThere are two methods of importing the trajectory alongside the topology file. The default will stream the trajectory file from disk, while In Memory will load the entire selected trajectory in to memory inside of the .blend file. See Importing for more info.\n\n\nFrames\nIf In Memory is selected, then you can choose which frames from the trajectory will be imported, with options for the first frame (indexed from 0), the last frame, and how many frames to skip (if any).\n\n\nImport Filter\nWhen importing, you can filter the atoms that are imported, to potentially not import waters or other particular selections, by specifying the Import Filter. This uses the MDAnalysis selection language, and is only applied on import.\n\n\nCustom Selections\nIf you wish to still import atoms, but create a series of custom boolean selections for custom colouring or animation, then you can create custom selections in this panel. Create a new selection, give it a name which will be used as the attribute name inside of Geometry Nodes, and the selection string which will be used to create the selection using the MDAnalysis selection language.",
    "crumbs": [
      "Tutorials",
      "Molecular Dynamics"
    ]
  },
  {
    "objectID": "tutorials/03_molecular_dynamics.html#importing-a-trajectory",
    "href": "tutorials/03_molecular_dynamics.html#importing-a-trajectory",
    "title": "Molecular Dynamics",
    "section": "Importing a Trajectory",
    "text": "Importing a Trajectory\n\nStreaming\nThe default option will associate an MDAnlaysis session with the read topology file. This will stream the topology from disk, as the frame in the scene inside of Blender changes. If the original topology or trajectory files are moved, this will break the connection to the data. This is the most performant option, but will potentially break if changing computers.\nBelow is an example of importing a trajectory, by streaming the frames. As the frame changes in the scene, the loaded frame is updated on the imported protein, based on the created MDAnalysis session. Interpolation between frames is currently not supported with this import method.\nThe MDAnalysis session will be saved when the .blend file is saved, and should be restored when the .blend file is reopened.\nVideo\n\n\nIn Memory\nThe In Memory option will load all frames of the trajectory in to memory, and store them as objects inside of the MN_data collection in the scene. This will ensure that all of the associated data is stored inside of the .blend file for portability, but will come at the cost of performance for very large trajectories. It also breaks the connection to the underlying MDAnalysis session, which limits the ability to further tweak the trajectory after import.\nIf In Memory is selected, the frames are imported as individual objects and stored in a MN_data collection. The interpolation between frames is then handled by nodes inside of Geometry Nodes, which aren’t necessarily linked to the scene frame.\nThis will create a larger .blend file and can lead to some performance drops with large trajectories, but ensures all of the data is kept within the saved file, and can enable further creative control through Geometry Nodes.\nAll connection to the underlying MDAnalysis session is lost on import, and the selections and trajectory cannot changed. To make changes you must reimport the trajectory.\nVideo",
    "crumbs": [
      "Tutorials",
      "Molecular Dynamics"
    ]
  },
  {
    "objectID": "tutorials/03_molecular_dynamics.html#creating-the-animation",
    "href": "tutorials/03_molecular_dynamics.html#creating-the-animation",
    "title": "Molecular Dynamics",
    "section": "Creating the Animation",
    "text": "Creating the Animation\nTo replicate the animation which we see at the top of the tutorial, we can use some of the example datasets which are provided alongside MDAnalysis with the MDAnalysisData package. To download one of the datasets, use the code below:\n# pip install MDAnalysisData\nfrom MDAnalysisData import datasets\ndatasets.fetch_adk_transitions_FRODA()\n\nLoading the Trajectory\nWe will load the trajectory, and load all of the frame sin to memory to ensure we can make a smoother trajectory.\nIn the video below we have imported the trajectory, and we can adjust the number of frames in the scene, as well as the number of frames the trajectory will play back over. We also enabled EEVEE atoms to display in the EEVEE render engine.\nVideo\n\nChanging Styles\nWe can change the style of the imported trajectory, by adding a new style node. We can combine styles with the Join Geometry. For more details on adding styles, see the (importing)[01_importing.qmd] tutorial.\nVideo\nWe can apply the atoms style, only to the side chains of the protein, by using the Backbone selection node, and using the is_side_chain output. This selectively applies the style to only those atoms in the selection. The combined styles now contain only the atoms for the side chains and a continuous ribbon for the protein.\nVideo\n\n\n\nSetting the Scene\nWe can set up the scene a bit nicer with a backdrop. In this case we create a plane using Shift + A to add a plane, go in to edit mode and extrude the backbdrop up with the E key. We can create a slightly curved corner by bevelling the corner. Select the two vertices of the edge and click Ctrl + B. Move the mouse and use the scroll wheel to adjust the settings, then left click to apply.\nVideo\n\n\nRendering the Animation\nWe can change some final settings of the style, do a test Render Image, change the export settings for where the frames of the animation are going to be saved, then we can click Render Animation to render all of the frames of the animation.\nVideo",
    "crumbs": [
      "Tutorials",
      "Molecular Dynamics"
    ]
  }
]